#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 75 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 12 #"Courier New\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1           0 349 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 259
(
 #"#reader(lib \"htdp-beginner-reader.ss\" \"lang\")((modname checkerbo"
 #"ard_blank) (read-case-sensitive #t) (teachpacks ((lib \"image.rkt\" "
 #"\"teachpack\" \"2htdp\"))) (htdp-settings #(#t constructor repeating"
 #"-decimal #f #t none #f ((lib \"image.rkt\" \"teachpack\" \"2htdp\"))"
 #")))"
) 0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; Tabuleiro de xadrez"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 7        1075 4           0 0           0 178 0 24 3 1 #" "
0 0 14 3 9 #"Fun\303\247\303\265es"
0 0 24 3 1 #" "
0 0 14 3 11 #"utilizadas:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 14 3 4 #"mode"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 2 #") "
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"and/c"
0 0 24 3 1 #" "
0 0 14 3 5 #"real?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"not/c"
0 0 24 3 1 #" "
0 0 14 3 9 #"negative?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"and/c"
0 0 24 3 1 #" "
0 0 14 3 5 #"real?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"not/c"
0 0 24 3 1 #" "
0 0 14 3 9 #"negative?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 4 #"mode"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"mode?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 5 #"color"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"image-color?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"beside"
0 0 24 3 1 #" "
0 0 14 3 2 #"i1"
0 0 24 3 1 #" "
0 0 14 3 2 #"i2"
0 0 24 3 1 #" "
0 0 14 3 2 #"is"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 2 #"i1"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 2 #"i2"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 2 #"is"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"above"
0 0 24 3 1 #" "
0 0 14 3 2 #"i1"
0 0 24 3 1 #" "
0 0 14 3 2 #"i2"
0 0 24 3 1 #" "
0 0 14 3 2 #"is"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 2 #"i1"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 2 #"i2"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 2 #"is"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 8 #"side-len"
0 0 24 3 1 #" "
0 0 14 3 4 #"mode"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 2 #") "
0 0 14 3 3 #"\342\206\222"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"side-len"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 5 #"and/c"
0 0 24 3 1 #" "
0 0 14 3 5 #"real?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"not/c"
0 0 24 3 1 #" "
0 0 14 3 9 #"negative?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 4 #"mode"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"mode?"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 5 #"color"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"image-color?"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 7          67 4           0 0           0 10 0 24 3 1 #" "
0 0 14 3 9 #"Problema:"
0 0 24 3 1 #" "
0 0 14 3 8 #"desenhar"
0 0 24 3 1 #" "
0 0 14 3 9 #"tabuleiro"
0 0 24 3 1 #" "
0 0 14 3 2 #"de"
0 0 24 3 1 #" "
0 0 14 3 6 #"xadrez"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Imagem -> Imagem"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #"; Retorna uma imagem equivalente a duas c\303\263pias da imagem conc"
 #"atenadas horizontalmente"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dois"
0 0 24 3 1 #" "
0 0 14 3 6 #"imagem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"beside"
0 0 24 3 1 #" "
0 0 14 3 6 #"imagem"
0 0 24 3 1 #" "
0 0 14 3 6 #"imagem"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";Exemplos (testes)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dois"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #"))"
0 12           4 4 217
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:translate 20 20 #("
 #"struct:ellipse 40 40 0 255 \"red\"))) #(struct:translate 40 0 #(stru"
 #"ct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\")))) #(struct"
 #":bb 80 40 40) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Imagem -> Imagem"
0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #"; Retorna uma imagem equivalente a quatro c\303\263pias da imagem co"
 #"ncatenadas em forma de quadrado"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"quatro"
0 0 24 3 1 #" "
0 0 14 3 6 #"imagem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"above"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dois"
0 0 24 3 1 #" "
0 0 14 3 6 #"imagem"
0 0 24 3 3 #") ("
0 0 14 3 4 #"dois"
0 0 24 3 1 #" "
0 0 14 3 6 #"imagem"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";Exemplos (testes)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"quatro"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 3 #")) "
0 12           4 4 475
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:translate 10"
 #" 10 #(struct:ellipse 20 20 0 255 \"red\"))) #(struct:translate 20 0 "
 #"#(struct:translate 10 10 #(struct:ellipse 20 20 0 255 \"red\"))))) #"
 #"(struct:translate 0 20 #(struct:overlay #(struct:translate 0 0 #(str"
 #"uct:translate 10 10 #(struct:ellipse 20 20 0 255 \"red\"))) #(struct"
 #":translate 20 0 #(struct:translate 10 10 #(struct:ellipse 20 20 0 25"
 #"5 \"red\")))))) #(struct:bb 40 40 40) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Imagem -> Imagem"
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #"; Retorna uma imagem equivalente a dezesseis c\303\263pias da imagem"
 #" concatenadas em forma de quadrado"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"dezesseis"
0 0 24 3 1 #" "
0 0 14 3 6 #"imagem"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"quatro"
0 0 24 3 2 #" ("
0 0 14 3 6 #"quatro"
0 0 24 3 1 #" "
0 0 14 3 6 #"imagem"
0 0 24 3 4 #") ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Exemplos (testes)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"dezesseis"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 3 #")) "
0 12           4 4 1991
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:translate 5 5 #(struct:ellipse 10 "
 #"10 0 255 \"red\"))) #(struct:translate 10 0 #(struct:translate 5 5 #"
 #"(struct:ellipse 10 10 0 255 \"red\"))))) #(struct:translate 0 10 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:translate 5 5 #(struct"
 #":ellipse 10 10 0 255 \"red\"))) #(struct:translate 10 0 #(struct:tra"
 #"nslate 5 5 #(struct:ellipse 10 10 0 255 \"red\"))))))) #(struct:tran"
 #"slate 20 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:translate 5 5 #(struct:ellipse 10 10"
 #" 0 255 \"red\"))) #(struct:translate 10 0 #(struct:translate 5 5 #(s"
 #"truct:ellipse 10 10 0 255 \"red\"))))) #(struct:translate 0 10 #(str"
 #"uct:overlay #(struct:translate 0 0 #(struct:translate 5 5 #(struct:e"
 #"llipse 10 10 0 255 \"red\"))) #(struct:translate 10 0 #(struct:trans"
 #"late 5 5 #(struct:ellipse 10 10 0 255 \"red\"))))))))) #(struct:tran"
 #"slate 0 20 #(struct:overlay #(struct:translate 0 0 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(str"
 #"uct:translate 5 5 #(struct:ellipse 10 10 0 255 \"red\"))) #(struct:t"
 #"ranslate 10 0 #(struct:translate 5 5 #(struct:ellipse 10 10 0 255 \""
 #"red\"))))) #(struct:translate 0 10 #(struct:overlay #(struct:transla"
 #"te 0 0 #(struct:translate 5 5 #(struct:ellipse 10 10 0 255 \"red\"))"
 #") #(struct:translate 10 0 #(struct:translate 5 5 #(struct:ellipse 10"
 #" 10 0 255 \"red\"))))))) #(struct:translate 20 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struc"
 #"t:translate 5 5 #(struct:ellipse 10 10 0 255 \"red\"))) #(struct:tra"
 #"nslate 10 0 #(struct:translate 5 5 #(struct:ellipse 10 10 0 255 \"re"
 #"d\"))))) #(struct:translate 0 10 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:translate 5 5 #(struct:ellipse 10 10 0 255 \"red\"))) "
 #"#(struct:translate 10 0 #(struct:translate 5 5 #(struct:ellipse 10 1"
 #"0 0 255 \"red\")))))))))) #(struct:bb 40 40 40) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; (Tamanho, Cor1, Cor2) -> Imagem"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Desenha uma linha (dois quadrados concatenados, cada um de uma cor"
 #")"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"linha"
0 0 24 3 1 #" "
0 0 14 3 7 #"tamanho"
0 0 24 3 1 #" "
0 0 14 3 4 #"cor1"
0 0 24 3 1 #" "
0 0 14 3 4 #"cor2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"beside"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 7 #"tamanho"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 14 3 4 #"cor1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 7 #"tamanho"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 14 3 4 #"cor2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Exemplos (testes):"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"linha"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #") "
0 12           4 4 372
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:point 0 0) #(struct:point 50 0) #(struct:poin"
 #"t 50 50) #(struct:point 0 50)) 255 \"red\"))) #(struct:translate 50 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(str"
 #"uct:point 50 0) #(struct:point 50 50) #(struct:point 0 50)) 255 \"bl"
 #"ack\")))) #(struct:bb 100 50 50) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"linha"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #") "
0 12           4 4 372
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:point 0 0) #(struct:point 50 0) #(struct:poin"
 #"t 50 50) #(struct:point 0 50)) 255 \"black\"))) #(struct:translate 5"
 #"0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(s"
 #"truct:point 50 0) #(struct:point 50 50) #(struct:point 0 50)) 255 \""
 #"red\")))) #(struct:bb 100 50 50) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 7 #"Tamanho"
0 0 17 3 2 #" ("
0 0 17 3 6 #"Numero"
0 0 17 3 1 #")"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"Cor1"
0 0 17 3 2 #" ("
0 0 17 3 6 #"string"
0 0 17 3 1 #")"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 24 #"Cor2 (string)) -> Imagem"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; Desenha padr\303\243o xadrez 2x2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"padrao-xadrez"
0 0 24 3 1 #" "
0 0 14 3 7 #"tamanho"
0 0 24 3 1 #" "
0 0 14 3 4 #"cor1"
0 0 24 3 1 #" "
0 0 14 3 4 #"cor2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"above"
0 0 24 3 2 #" ("
0 0 14 3 5 #"linha"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 7 #"tamanho"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 4 #"cor1"
0 0 24 3 1 #" "
0 0 14 3 4 #"cor2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"linha"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 7 #"tamanho"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 4 #"cor2"
0 0 24 3 1 #" "
0 0 14 3 4 #"cor1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Exemplos (testes):"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"padrao-xadrez"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #") "
0 12           4 4 783
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point"
 #" 0 0) #(struct:point 25 0) #(struct:point 25 25) #(struct:point 0 25"
 #")) 255 \"black\"))) #(struct:translate 25 0 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:point 0 0) #(struct:point 25 0) #(struct:p"
 #"oint 25 25) #(struct:point 0 25)) 255 \"red\"))))) #(struct:translat"
 #"e 0 25 #(struct:overlay #(struct:translate 0 0 #(struct:translate 0 "
 #"0 #(struct:polygon (#(struct:point 0 0) #(struct:point 25 0) #(struc"
 #"t:point 25 25) #(struct:point 0 25)) 255 \"red\"))) #(struct:transla"
 #"te 25 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0)"
 #" #(struct:point 25 0) #(struct:point 25 25) #(struct:point 0 25)) 25"
 #"5 \"black\")))))) #(struct:bb 50 50 50) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; (Tamanho (Numero), Cor1 (string), Cor2 (string)) -> Imagem "
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; Desenha tabuleiro de xadrez (8x8)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"tabuleiro-xadrez"
0 0 24 3 1 #" "
0 0 14 3 7 #"tamanho"
0 0 24 3 1 #" "
0 0 14 3 4 #"cor1"
0 0 24 3 1 #" "
0 0 14 3 4 #"cor2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"dezesseis"
0 0 24 3 2 #" ("
0 0 14 3 13 #"padrao-xadrez"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 7 #"tamanho"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 14 3 4 #"cor1"
0 0 24 3 1 #" "
0 0 14 3 4 #"cor2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 19 #";Exemplos (testes):"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"tabuleiro-xadrez"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #") "
0 12           4 4 13786
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct"
 #":polygon (#(struct:point 0 0) #(struct:point 25/2 0) #(struct:point "
 #"25/2 25/2) #(struct:point 0 25/2)) 255 \"blue\"))) #(struct:translat"
 #"e 25/2 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0"
 #") #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 "
 #"25/2)) 255 \"black\"))))) #(struct:translate 0 25/2 #(struct:overlay"
 #" #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(s"
 #"truct:point 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #("
 #"struct:point 0 25/2)) 255 \"black\"))) #(struct:translate 25/2 0 #(s"
 #"truct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:p"
 #"oint 25/2 0) #(struct:point 25/2 2"
 #"5/2) #(struct:point 0 25/2)) 255 \"blue\"))))))) #(struct:translate "
 #"25 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"oint 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:"
 #"point 0 25/2)) 255 \"blue\"))) #(struct:translate 25/2 0 #(struct:tr"
 #"anslate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 25/"
 #"2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"black\""
 #"))))) #(struct:translate 0 25/2 #(struct:overlay #(struct:translate "
 #"0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(s"
 #"truct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)"
 #") 255 \"black\"))) #(struct:translate 25/2 0 #(struct:translate 0 0 "
 #"#(struct:polygon (#(struct:point 0 0) #(struct:point 25/2 0) #(struc"
 #"t:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"blue\"))))))))) #(s"
 #"truct:translate 0 25 #(struct:overlay #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #("
 #"struct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2"
 #")) 255 \"blue\"))) #(struct:translate 25/2 0 #(struct:translate 0 0 "
 #"#(struct:polygon (#(struct:point 0 0) #(struct:point 25/2 0) #(struc"
 #"t:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"black\"))))) #(stru"
 #"ct:translate 0 25/2 #(struct:overlay #(struct:translate 0 0 #(struct"
 #":translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point "
 #"25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"blac"
 #"k\"))) #(struct:translate 25/2 0 #(struct:translate 0 0 #(struct:pol"
 #"ygon (#(struct:point 0 0) #(struct:point 25/2 0) #(struct:point 25/2"
 #" 25/2) #(struct:point 0 25/2)) 255 \"blue\"))))))) #(struct:translat"
 #"e 25 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":point 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(struc"
 #"t:point 0 25/2)) 255 \"blue\"))) #(struct:translate 25/2 0 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 2"
 #"5/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"black"
 #"\"))))) #(struct:translate 0 25/2 #(struct:overlay #(struct:translat"
 #"e 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #"
 #"(struct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/"
 #"2)) 255 \"black\"))) #(struct:translate 25/2 0 #(struct:translate 0 "
 #"0 #(struct:polygon (#(struct:point 0 0) #(struct:point 25/2 0) #(str"
 #"uct:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"blue\")))))))))))"
 #" #(struct:translate 50 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate "
 #"0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 25/2 0) #(s"
 #"truct:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"blue\"))) #(str"
 #"uct:translate 25/2 0 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:point 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(str"
 #"uct:point 0 25/2)) 255 \"black\"))))) #(struct:translate 0 25/2 #(st"
 #"ruct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:"
 #"polygon (#(struct:point 0 0) #(struct:point 25/2 0) #(struct:point 2"
 #"5/2 25/2) #(struct:point 0 25/2)) 255 \"black\"))) #(struct:translat"
 #"e 25/2 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0"
 #") #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 "
 #"25/2)) 255 \"blue\"))))))) #(struct:translate 25 0 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(str"
 #"uct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:poi"
 #"nt 25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"b"
 #"lue\"))) #(struct:translate 25/2 0 #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:point 0 0) #(struct:point 25/2 0) #(struct:point 25"
 #"/2 25/2) #(struct:point 0 25/2)) 255 \"black\"))))) #(struct:transla"
 #"te 0 25/2 #(struct:overlay #(struct:translate 0 0 #(struct:translate"
 #" 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 25/2 0) #("
 #"struct:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"black\"))) #(s"
 #"truct:translate 25/2 0 #(struct:translate 0 0 #(struct:polygon (#(st"
 #"ruct:point 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(s"
 #"truct:point 0 25/2)) 255 \"blue\"))))))))) #(struct:translate 0 25 #"
 #"(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tra"
 #"nslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translat"
 #"e 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 25/2 0) #"
 #"(struct:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"blue\"))) #(s"
 #"truct:translate 25/2 0 #(struct:translate 0 0 #(struct:polygon (#(st"
 #"ruct:point 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(s"
 #"truct:point 0 25/2)) 255 \"black\"))))) #(struct:translate 0 25/2 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struc"
 #"t:polygon (#(struct:point 0 0) #(struct:point 25/2 0) #(struct:point"
 #" 25/2 25/2) #(struct:point 0 25/2)) 255 \"black\"))) #(struct:transl"
 #"ate 25/2 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0"
 #" 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:point "
 #"0 25/2)) 255 \"blue\"))))))) #(struct:translate 25 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:p"
 #"oint 25/2 0) #(struct:point 25/2 2"
 #"5/2) #(struct:point 0 25/2)) 255 \"blue\"))) #(struct:translate 25/2"
 #" 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(st"
 #"ruct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2))"
 #" 255 \"black\"))))) #(struct:translate 0 25/2 #(struct:overlay #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"point 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(struct"
 #":point 0 25/2)) 255 \"black\"))) #(struct:translate 25/2 0 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 2"
 #"5/2 0) #(struct:point 25/2 25/2) "
 #"#(struct:point 0 25/2)) 255 \"blue\"))))))))))))) #(struct:translate"
 #" 0 50 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(str"
 #"uct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)) "
 #"255 \"blue\"))) #(struct:translate 25/2 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:point 0 0) #(struct:point 25/2 0) #(struct:p"
 #"oint 25/2 25/2) #(struct:point 0 25/2)) 255 \"black\"))))) #(struct:"
 #"translate 0 25/2 #(struct:overlay #(struct:translate 0 0 #(struct:tr"
 #"anslate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 25/"
 #"2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"black\""
 #"))) #(struct:translate 25/2 0 #(struct:translate 0 0 #(struct:polygo"
 #"n (#(struct:point 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25"
 #"/2) #(struct:point 0 25/2)) 255 \"blue\"))))))) #(struct:translate 2"
 #"5 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:po"
 #"int 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:p"
 #"oint 0 25/2)) 255 \"blue\"))) #(struct:translate 25/2 0 #(struct:tra"
 #"nslate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 25/2"
 #" 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"black\")"
 #")))) #(struct:translate 0 25/2 #(struct:overlay #(struct:translate 0"
 #" 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(st"
 #"ruct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2))"
 #" 255 \"black\"))) #(struct:translate 25/2 0 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:point 0 0) #(struct:point 25/2 0) #(struct"
 #":point 25/2 25/2) #(struct:point 0 25/2)) 255 \"blue\"))))))))) #(st"
 #"ruct:translate 0 25 #(struct:overlay #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(s"
 #"truct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)"
 #") 255 \"blue\"))) #(struct:translate 25/2 0 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:point 0 0) #(struct:point 25/2 0) #(struct"
 #":point 25/2 25/2) #(struct:point 0 25/2)) 255 \"black\"))))) #(struc"
 #"t:translate 0 25/2 #(struct:overlay #(struct:translate 0 0 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 2"
 #"5/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"black"
 #"\"))) #(struct:translate 25/2 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:point 0 0) #(struct:point 25/2 0) #(struct:point 25/2 "
 #"25/2) #(struct:point 0 25/2)) 255 \"blue\"))))))) #(struct:translate"
 #" 25 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"point 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(struct"
 #":point 0 25/2)) 255 \"blue\"))) #(struct:translate 25/2 0 #(struct:t"
 #"ranslate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 25"
 #"/2 0) #(struct:point 25/2 25/2) #"
 #"(struct:point 0 25/2)) 255 \"black\"))))) #(struct:translate 0 25/2 "
 #"#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(str"
 #"uct:polygon (#(struct:point 0 0) #(struct:point 25/2 0) #(struct:poi"
 #"nt 25/2 25/2) #(struct:point 0 25/2)) 255 \"black\"))) #(struct:tran"
 #"slate 25/2 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point"
 #" 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:poin"
 #"t 0 25/2)) 255 \"blue\"))))))))))) #(struct:translate 50 0 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:poi"
 #"nt 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:po"
 #"int 0 25/2)) 255 \"blue\"))) #(struct:translate 25/2 0 #(struct:tran"
 #"slate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 25/2 "
 #"0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"black\"))"
 #"))) #(struct:translate 0 25/2 #(struct:overlay #(struct:translate 0 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(str"
 #"uct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)) "
 #"255 \"black\"))) #(struct:translate 25/2 0 #(struct:translate 0 0 #("
 #"struct:polygon (#(struct:point 0 0) #(struct:point 25/2 0) #(struct:"
 #"point 25/2 25/2) #(struct:point 0 25/2)) 255 \"blue\"))))))) #(struc"
 #"t:translate 25 0 #(struct:overlay #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon"
 #" (#(struct:point 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/"
 #"2) #(struct:point 0 25/2)) 255 \"blue\"))) #(struct:translate 25/2 0"
 #" #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(stru"
 #"ct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)) 2"
 #"55 \"black\"))))) #(struct:translate 0 25/2 #(struct:overlay #(struc"
 #"t:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:po"
 #"int 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:p"
 #"oint 0 25/2)) 255 \"black\"))) #(struct:translate 25/2 0 #(struct:tr"
 #"anslate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 25/"
 #"2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"blue\")"
 #")))))))) #(struct:translate 0 25 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"oint 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:"
 #"point 0 25/2)) 255 \"blue\"))) #(struct:translate 25/2 0 #(struct:tr"
 #"anslate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 25/"
 #"2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"black\""
 #"))))) #(struct:translate 0 25/2 #(struct:overlay #(struct:translate "
 #"0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(s"
 #"truct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2)"
 #") 255 \"black\"))) #(struct:translate 25/2 0 #(struct:translate 0 0 "
 #"#(struct:polygon (#(struct:point 0 0) #(struct:point 25/2 0) #(struc"
 #"t:point 25/2 25/2) #(struct:point 0 25/2)) 255 \"blue\"))))))) #(str"
 #"uct:translate 25 0 #(struct:overlay #(struct:translate 0 0 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:point 0 0) #(struct:point 25/2 0) #(struct:point 25/2 2"
 #"5/2) #(struct:point 0 25/2)) 255 \"blue\"))) #(struct:translate 25/2"
 #" 0 #(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(st"
 #"ruct:point 25/2 0) #(struct:point 25/2 25/2) #(struct:point 0 25/2))"
 #" 255 \"black\"))))) #(struct:translate 0 25/2 #(struct:overlay #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"point 0 0) #(struct:point 25/2 0) #(struct:point 25/2 25/2) #(struct"
 #":point 0 25/2)) 255 \"black\"))) #(struct:translate 25/2 0 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 2"
 #"5/2 0) #(struct:point 25/2 25/2) "
 #"#(struct:point 0 25/2)) 255 \"blue\")))))))))))))) #(struct:bb 100 1"
 #"00 100) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
